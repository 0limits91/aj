State Machine:
	if(state == IDLE) {
		if(token == variable) {
			state = STATEMENT
		}
	}

	if(state == STATEMENT) {
		if(token == variable) {
			variable = token[pc-1].value
			pc++
			if(token == "=") {
				pc++
				state = expression
			} else if(token == "(") {
					pc++
				if(token == ")") {
					call_function(functions[variable])
					pc++
					state = IDLE
				} else if (token == variable) {
					stack_add(variables[token])
					pc++
					while(token== ',') {
						pc++
						if(token==variable) {
							stack_add(variables[token])
							pc++
						}
					}
					if(token == ")" ) {
						call_function()
						state = IDLE
					}


				}
			}
		} else {
			error();
		}
	}








a.b




// variable

if(token == VARIABLE) {
	if(token + 1 == ++)
		++
	else if token + 1 == --
		--
}





1+2+3+"4"

(1+(2+3+"4"))
(2+(3+"4"))
(3+("4"))
("4")

//(


getExpressions()//
	token = 1
	type = number
	value = 1
	
	pc++
	token = +
	value = value + getExpression().value // 1+()
		token = 2
		value = 2
	



function double(x)
	return x+x
end

Variable double(Variable::FUNCTION, "NIL")
double.params["x"]
double.code = "return x+x"

double(2)
=====>
return x+x
convert
return 2+2

